import { PrismaClient } from '@prisma/client'
import bcrypt from 'bcryptjs'

const prisma = new PrismaClient()

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏•‡∏Ç Work Order
function generateWorkId(workNumber) {
  const today = new Date()
  const year = today.getFullYear().toString().slice(-2)
  const month = (today.getMonth() + 1).toString().padStart(2, '0')
  const day = today.getDate().toString().padStart(2, '0')
  const datePart = `${year}${month}${day}`
  const workNumberPart = workNumber.toString().padStart(3, '0')
  return `${datePart}${workNumberPart}`
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏•‡∏Ç Invoice
function generateInvoiceNumber() {
  const today = new Date()
  const year = today.getFullYear().toString().slice(-2)
  const month = (today.getMonth() + 1).toString().padStart(2, '0')
  const day = today.getDate().toString().padStart(2, '0')
  const datePart = `${year}${month}${day}`
  const timePart = Date.now().toString().slice(-3)
  return `INV${datePart}${timePart}`
}

async function seedCompleteData() {
  try {
    console.log('üå± ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô...')

    // 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á Admin User
    let adminUser = await prisma.user.findFirst({
      where: { role: 'ADMIN' }
    })

    if (!adminUser) {
      console.log('üë§ ‡∏™‡∏£‡πâ‡∏≤‡∏á Admin User...')
      const hashedPassword = await bcrypt.hash('admin123', 12)
      adminUser = await prisma.user.create({
        data: {
          email: 'admin@example.com',
          name: 'System Administrator',
          password: hashedPassword,
          role: 'ADMIN'
        }
      })
      console.log('‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á Admin User ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à')
    } else {
      console.log('‚úÖ ‡∏û‡∏ö Admin User ‡πÅ‡∏•‡πâ‡∏ß')
    }

    // 2. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
    console.log('\nüë• ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°...')
    
    const customers = await Promise.all([
      prisma.customer.upsert({
        where: { email: 'empire@example.com' },
        update: {},
        create: {
          name: '‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó ‡πÄ‡∏≠‡πá‡∏°‡πÑ‡∏û‡∏£‡πå ‡∏°‡∏≤‡∏¢‡∏ô‡∏¥‡πà‡∏á ‡∏à‡∏≥‡∏Å‡∏±‡∏î',
          email: 'empire@example.com',
          phone: '0812345678',
          address: '123 ‡∏ñ‡∏ô‡∏ô‡∏™‡∏∏‡∏Ç‡∏∏‡∏°‡∏ß‡∏¥‡∏ó ‡πÅ‡∏Ç‡∏ß‡∏á‡∏Ñ‡∏•‡∏≠‡∏á‡πÄ‡∏ï‡∏¢ ‡πÄ‡∏Ç‡∏ï‡∏Ñ‡∏•‡∏≠‡∏á‡πÄ‡∏ï‡∏¢ ‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏Ø 10110',
          company: 'Empire Mining Co., Ltd.',
          taxId: '0123456789012',
          createdBy: adminUser.id
        }
      }),
      prisma.customer.upsert({
        where: { email: 'somchai@example.com' },
        update: {},
        create: {
          name: '‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ä‡∏≤‡∏¢ ‡πÉ‡∏à‡∏î‡∏µ',
          email: 'somchai@example.com',
          phone: '0898765432',
          address: '456 ‡∏ñ‡∏ô‡∏ô‡∏£‡∏±‡∏ä‡∏î‡∏≤‡∏†‡∏¥‡πÄ‡∏©‡∏Å ‡πÅ‡∏Ç‡∏ß‡∏á‡∏î‡∏¥‡∏ô‡πÅ‡∏î‡∏á ‡πÄ‡∏Ç‡∏ï‡∏î‡∏¥‡∏ô‡πÅ‡∏î‡∏á ‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏Ø 10400',
          createdBy: adminUser.id
        }
      }),
      prisma.customer.upsert({
        where: { email: 'test.customer@example.com' },
        update: {},
        create: {
          name: '‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏î‡∏™‡∏≠‡∏ö ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà',
          email: 'test.customer@example.com',
          phone: '0812345678',
          address: '123 ‡∏ñ‡∏ô‡∏ô‡∏ó‡∏î‡∏™‡∏≠‡∏ö ‡πÅ‡∏Ç‡∏ß‡∏á‡∏ó‡∏î‡∏™‡∏≠‡∏ö ‡πÄ‡∏Ç‡∏ó‡∏î‡∏™‡∏≠‡∏ö ‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏Ø 10110',
          company: '‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó ‡∏ó‡∏î‡∏™‡∏≠‡∏ö ‡∏à‡∏≥‡∏Å‡∏±‡∏î',
          taxId: '1234567890123',
          createdBy: adminUser.id
        }
      }),
      prisma.customer.upsert({
        where: { email: 'mining@example.com' },
        update: {},
        create: {
          name: '‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó ‡∏°‡∏≤‡∏¢‡∏ô‡∏¥‡πà‡∏á ‡πÄ‡∏ó‡∏Ñ ‡∏à‡∏≥‡∏Å‡∏±‡∏î',
          email: 'mining@example.com',
          phone: '0823456789',
          address: '789 ‡∏ñ‡∏ô‡∏ô‡∏û‡∏£‡∏∞‡∏£‡∏≤‡∏° 9 ‡πÅ‡∏Ç‡∏ß‡∏á‡∏´‡πâ‡∏ß‡∏¢‡∏Ç‡∏ß‡∏≤‡∏á ‡πÄ‡∏Ç‡∏ï‡∏´‡πâ‡∏ß‡∏¢‡∏Ç‡∏ß‡∏≤‡∏á ‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏Ø 10310',
          company: 'Mining Tech Co., Ltd.',
          taxId: '9876543210987',
          createdBy: adminUser.id
        }
      }),
      prisma.customer.upsert({
        where: { email: 'crypto@example.com' },
        update: {},
        create: {
          name: '‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏£‡∏¥‡∏õ‡πÇ‡∏ï ‡∏ü‡∏≤‡∏£‡πå‡∏°',
          email: 'crypto@example.com',
          phone: '0834567890',
          address: '321 ‡∏ñ‡∏ô‡∏ô‡∏•‡∏≤‡∏î‡∏û‡∏£‡πâ‡∏≤‡∏ß ‡πÅ‡∏Ç‡∏ß‡∏á‡∏•‡∏≤‡∏î‡∏û‡∏£‡πâ‡∏≤‡∏ß ‡πÄ‡∏Ç‡∏ï‡∏•‡∏≤‡∏î‡∏û‡∏£‡πâ‡∏≤‡∏ß ‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏Ø 10230',
          company: 'Crypto Farm',
          taxId: '5556667778889',
          createdBy: adminUser.id
        }
      })
    ])

    console.log(`‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ ${customers.length} ‡∏£‡∏≤‡∏¢‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`)

    // 3. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡πà‡∏≤‡∏á‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
    console.log('\nüîß ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡πà‡∏≤‡∏á‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°...')
    
    const technicians = await Promise.all([
      prisma.technician.upsert({
        where: { email: 'somsak@example.com' },
        update: {},
        create: {
          name: '‡∏ä‡πà‡∏≤‡∏á‡∏™‡∏°‡∏®‡∏±‡∏Å‡∏î‡∏¥‡πå ‡∏°‡∏∑‡∏≠‡∏ó‡∏≠‡∏á',
          email: 'somsak@example.com',
          phone: '0823456789',
          speciality: 'Power Supply, Motherboard, GPU',
          hourlyRate: 500,
          isActive: true,
          createdBy: adminUser.id
        }
      }),
      prisma.technician.upsert({
        where: { email: 'prayut@example.com' },
        update: {},
        create: {
          name: '‡∏ä‡πà‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡∏¢‡∏∏‡∏ó‡∏ò ‡πÉ‡∏à‡πÄ‡∏¢‡πá‡∏ô',
          email: 'prayut@example.com',
          phone: '0834567890',
          speciality: 'Fan, Cooling System, Maintenance',
          hourlyRate: 450,
          isActive: true,
          createdBy: adminUser.id
        }
      }),
      prisma.technician.upsert({
        where: { email: 'somkiat@example.com' },
        update: {},
        create: {
          name: '‡∏ä‡πà‡∏≤‡∏á‡∏™‡∏°‡πÄ‡∏Å‡∏µ‡∏¢‡∏£‡∏ï‡∏¥ ‡∏°‡∏∑‡∏≠‡∏≠‡∏≤‡∏ä‡∏µ‡∏û',
          email: 'somkiat@example.com',
          phone: '0845678901',
          speciality: 'Software, Firmware, Network',
          hourlyRate: 600,
          isActive: true,
          createdBy: adminUser.id
        }
      })
    ])

    console.log(`‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡πà‡∏≤‡∏á‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ ${technicians.length} ‡∏Ñ‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`)

    // 4. ‡∏™‡∏£‡πâ‡∏≤‡∏á Miner Models ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
    console.log('\n‚öôÔ∏è ‡∏™‡∏£‡πâ‡∏≤‡∏á Miner Models ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°...')
    
    const minerModels = await Promise.all([
      prisma.minerModel.upsert({
        where: { 
          id: 'bitmain-s19-xp'
        },
        update: {},
        create: {
          id: 'bitmain-s19-xp',
          brand: 'Bitmain',
          model: 'Antminer S19 XP',
          series: 'S19',
          hashRate: '140 TH/s',
          power: '3010W',
          description: 'Bitcoin mining machine with high efficiency',
          isActive: true
        }
      }),
      prisma.minerModel.upsert({
        where: { 
          id: 'whatsminer-m50s'
        },
        update: {},
        create: {
          id: 'whatsminer-m50s',
          brand: 'Whatsminer',
          model: 'M50S',
          series: 'M50',
          hashRate: '126 TH/s',
          power: '3276W',
          description: 'Whatsminer Bitcoin mining machine',
          isActive: true
        }
      }),
      prisma.minerModel.upsert({
        where: { 
          id: 'bitmain-s19-pro'
        },
        update: {},
        create: {
          id: 'bitmain-s19-pro',
          brand: 'Bitmain',
          model: 'Antminer S19 Pro',
          series: 'S19',
          hashRate: '110 TH/s',
          power: '3250W',
          description: 'Bitmain S19 Pro Bitcoin miner',
          isActive: true
        }
      }),
      prisma.minerModel.upsert({
        where: { 
          id: 'avalon-a1246'
        },
        update: {},
        create: {
          id: 'avalon-a1246',
          brand: 'Avalon',
          model: 'A1246',
          series: 'A12',
          hashRate: '90 TH/s',
          power: '3420W',
          description: 'Avalon Bitcoin mining machine',
          isActive: true
        }
      })
    ])

    console.log(`‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á Miner Models ${minerModels.length} ‡∏£‡∏∏‡πà‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`)

    // 5. ‡∏™‡∏£‡πâ‡∏≤‡∏á Work Orders ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
    console.log('\nüîß ‡∏™‡∏£‡πâ‡∏≤‡∏á Work Orders ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°...')
    
    const workOrders = await Promise.all([
      prisma.workOrder.upsert({
        where: { orderNumber: 'WO-2025-0821-001' },
        update: {},
        create: {
          orderNumber: 'WO-2025-0821-001',
          customerId: customers[0].id,
          technicianId: technicians[0].id,
          minerModelId: minerModels[0].id,
          serialNumber: 'BM2025001',
          issue: 'Power supply failure - ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÑ‡∏î‡πâ',
          diagnosis: 'Power supply unit ‡πÄ‡∏™‡∏µ‡∏¢‡∏´‡∏≤‡∏¢ ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÉ‡∏´‡∏°‡πà',
          solution: '‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô power supply unit ‡πÅ‡∏•‡∏∞‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô',
          status: 'COMPLETED',
          priority: 'HIGH',
          estimatedCost: 4000,
          actualCost: 4200,
          startDate: new Date('2025-08-20'),
          completedDate: new Date('2025-08-21'),
          notes: '‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏ã‡πà‡∏≠‡∏°‡∏î‡πà‡∏ß‡∏ô',
          createdBy: adminUser.id
        }
      }),
      prisma.workOrder.upsert({
        where: { orderNumber: 'WO-2025-0821-002' },
        update: {},
        create: {
          orderNumber: 'WO-2025-0821-002',
          customerId: customers[1].id,
          technicianId: technicians[1].id,
          minerModelId: minerModels[1].id,
          serialNumber: 'WM2025002',
          issue: 'Fan malfunction - ‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏î‡∏±‡∏á‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥',
          diagnosis: 'Fan ‡πÉ‡∏ö‡∏û‡∏±‡∏î‡πÄ‡∏™‡∏µ‡∏¢‡∏´‡∏≤‡∏¢ ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÉ‡∏´‡∏°‡πà',
          solution: '‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô fan ‡πÅ‡∏•‡∏∞‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏£‡∏∞‡∏ö‡∏ö‡∏£‡∏∞‡∏ö‡∏≤‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡πâ‡∏≠‡∏ô',
          status: 'IN_PROGRESS',
          priority: 'MEDIUM',
          estimatedCost: 1500,
          actualCost: null,
          startDate: new Date('2025-08-21'),
          completedDate: null,
          notes: '‡∏£‡∏≠‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà‡∏à‡∏≤‡∏Å‡∏ã‡∏±‡∏û‡∏û‡∏•‡∏≤‡∏¢‡πÄ‡∏≠‡∏≠‡∏£‡πå',
          createdBy: adminUser.id
        }
      }),
      prisma.workOrder.upsert({
        where: { orderNumber: '250821003' },
        update: {},
        create: {
          orderNumber: '250821003',
          customerId: customers[2].id,
          technicianId: technicians[0].id,
          minerModelId: minerModels[2].id,
          serialNumber: 'TEST-' + Date.now(),
          issue: '‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏Ç‡∏∏‡∏î‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏î‡πâ - ‡πÑ‡∏ü‡πÑ‡∏°‡πà‡∏ï‡∏¥‡∏î ‡∏°‡∏µ‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏î‡∏±‡∏á‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥',
          diagnosis: 'Power Supply Unit ‡πÄ‡∏™‡∏µ‡∏¢‡∏´‡∏≤‡∏¢ - ‡πÑ‡∏ü‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏∞‡∏ö‡∏ö ‡∏°‡∏µ‡∏Å‡∏•‡∏¥‡πà‡∏ô‡πÑ‡∏´‡∏°‡πâ',
          solution: '‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô Power Supply Unit ‡πÉ‡∏´‡∏°‡πà ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏û‡∏±‡∏î‡∏•‡∏°',
          status: 'COMPLETED',
          priority: 'HIGH',
          estimatedCost: 3500,
          actualCost: 4200,
          startDate: new Date('2025-08-21'),
          completedDate: new Date('2025-08-21'),
          notes: '‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏î‡πà‡∏ß‡∏ô ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏¢‡∏∏‡∏î‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Å‡∏∞‡∏ó‡∏±‡∏ô‡∏´‡∏±‡∏ô',
          createdBy: adminUser.id
        }
      }),
      prisma.workOrder.upsert({
        where: { orderNumber: '250821004' },
        update: {},
        create: {
          orderNumber: '250821004',
          customerId: customers[3].id,
          technicianId: technicians[2].id,
          minerModelId: minerModels[3].id,
          serialNumber: 'AV2025003',
          issue: 'Software error - ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢‡πÑ‡∏î‡πâ',
          diagnosis: 'Firmware ‡πÄ‡∏Å‡πà‡∏≤ ‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÉ‡∏´‡∏°‡πà',
          solution: '‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï firmware ‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢‡πÉ‡∏´‡∏°‡πà',
          status: 'PENDING',
          priority: 'LOW',
          estimatedCost: 800,
          actualCost: null,
          startDate: null,
          completedDate: null,
          notes: '‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏à‡∏≤‡∏Å‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤',
          createdBy: adminUser.id
        }
      }),
      prisma.workOrder.upsert({
        where: { orderNumber: '250821005' },
        update: {},
        create: {
          orderNumber: '250821005',
          customerId: customers[4].id,
          technicianId: technicians[1].id,
          minerModelId: minerModels[0].id,
          serialNumber: 'BM2025004',
          issue: 'Overheating - ‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡∏™‡∏π‡∏á‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ',
          diagnosis: '‡∏£‡∏∞‡∏ö‡∏ö‡∏£‡∏∞‡∏ö‡∏≤‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡πâ‡∏≠‡∏ô‡∏≠‡∏∏‡∏î‡∏ï‡∏±‡∏ô ‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î',
          solution: '‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏û‡∏±‡∏î‡∏•‡∏°‡πÅ‡∏•‡∏∞‡∏£‡∏∞‡∏ö‡∏ö‡∏£‡∏∞‡∏ö‡∏≤‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡πâ‡∏≠‡∏ô',
          status: 'COMPLETED',
          priority: 'MEDIUM',
          estimatedCost: 1200,
          actualCost: 1100,
          startDate: new Date('2025-08-20'),
          completedDate: new Date('2025-08-21'),
          notes: '‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏û‡∏≠‡πÉ‡∏à‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ã‡πà‡∏≠‡∏°',
          createdBy: adminUser.id
        }
      })
    ])

    console.log(`‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á Work Orders ${workOrders.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`)

    // 6. ‡∏™‡∏£‡πâ‡∏≤‡∏á Invoices ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
    console.log('\nüí∞ ‡∏™‡∏£‡πâ‡∏≤‡∏á Invoices ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°...')
    
    const invoices = await Promise.all([
      prisma.invoice.upsert({
        where: { invoiceNumber: 'INV250821001' },
        update: {},
        create: {
          invoiceNumber: 'INV250821001',
          customerId: customers[0].id,
          workOrderId: workOrders[0].id,
          issueDate: new Date('2025-08-21'),
          dueDate: new Date('2025-09-21'),
          subtotal: 4000,
          taxAmount: 280,
          discountAmount: 0,
          totalAmount: 4280,
          paidAmount: 2000,
          balanceAmount: 2280,
          notes: '‡∏ã‡πà‡∏≠‡∏° Power Supply ‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏µ‡∏¢‡∏´‡∏≤‡∏¢',
          terms: '‡∏ä‡∏≥‡∏£‡∏∞‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 30 ‡∏ß‡∏±‡∏ô',
          status: 'PARTIAL',
          createdBy: adminUser.id,
          items: {
            create: [
              {
                description: '‡∏ã‡πà‡∏≠‡∏° Power Supply',
                quantity: 1,
                unitPrice: 2500,
                totalPrice: 2500,
                type: 'SERVICE'
              },
              {
                description: '‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà Power Supply Unit',
                quantity: 1,
                unitPrice: 1500,
                totalPrice: 1500,
                type: 'PARTS'
              }
            ]
          }
        }
      }),
      prisma.invoice.upsert({
        where: { invoiceNumber: 'INV250821002' },
        update: {},
        create: {
          invoiceNumber: 'INV250821002',
          customerId: customers[1].id,
          workOrderId: workOrders[1].id,
          issueDate: new Date('2025-08-21'),
          dueDate: new Date('2025-09-21'),
          subtotal: 1500,
          taxAmount: 105,
          discountAmount: 0,
          totalAmount: 1605,
          paidAmount: 1605,
          balanceAmount: 0,
          notes: '‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô Fan ‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏µ‡∏¢‡∏´‡∏≤‡∏¢',
          terms: '‡∏ä‡∏≥‡∏£‡∏∞‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 30 ‡∏ß‡∏±‡∏ô',
          status: 'PAID',
          createdBy: adminUser.id,
          items: {
            create: [
              {
                description: '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏ã‡πà‡∏≠‡∏° Fan',
                quantity: 1,
                unitPrice: 800,
                totalPrice: 800,
                type: 'SERVICE'
              },
              {
                description: 'Fan ‡πÉ‡∏´‡∏°‡πà',
                quantity: 2,
                unitPrice: 300,
                totalPrice: 600,
                type: 'PARTS'
              }
            ]
          }
        }
      }),
      prisma.invoice.upsert({
        where: { invoiceNumber: 'INV250821960' },
        update: {},
        create: {
          invoiceNumber: 'INV250821960',
          customerId: customers[2].id,
          workOrderId: workOrders[2].id,
          issueDate: new Date('2025-08-21'),
          dueDate: new Date('2025-09-20'),
          subtotal: 4200,
          taxAmount: 294,
          discountAmount: 0,
          totalAmount: 4494,
          paidAmount: 0,
          balanceAmount: 4494,
          notes: '‡∏ã‡πà‡∏≠‡∏° Power Supply Unit ‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏µ‡∏¢‡∏´‡∏≤‡∏¢',
          terms: '‡∏ä‡∏≥‡∏£‡∏∞‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 30 ‡∏ß‡∏±‡∏ô',
          status: 'DRAFT',
          createdBy: adminUser.id,
          items: {
            create: [
              {
                description: '‡∏Ñ‡πà‡∏≤‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏ß‡∏¥‡∏ô‡∏¥‡∏à‡∏â‡∏±‡∏¢',
                quantity: 1,
                unitPrice: 800,
                totalPrice: 800,
                type: 'SERVICE'
              },
              {
                description: '‡∏Ñ‡πà‡∏≤‡πÅ‡∏£‡∏á‡∏ä‡πà‡∏≤‡∏á‡∏ã‡πà‡∏≠‡∏° (2 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á)',
                quantity: 2,
                unitPrice: 500,
                totalPrice: 1000,
                type: 'LABOR'
              },
              {
                description: 'Power Supply Unit (PSU) 3250W',
                quantity: 1,
                unitPrice: 2200,
                totalPrice: 2200,
                type: 'PARTS'
              },
              {
                description: '‡∏Ñ‡πà‡∏≤‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡πÅ‡∏•‡∏∞‡∏ö‡∏≥‡∏£‡∏∏‡∏á‡∏£‡∏±‡∏Å‡∏©‡∏≤',
                quantity: 1,
                unitPrice: 200,
                totalPrice: 200,
                type: 'SERVICE'
              }
            ]
          }
        }
      }),
      prisma.invoice.upsert({
        where: { invoiceNumber: 'INV250821003' },
        update: {},
        create: {
          invoiceNumber: 'INV250821003',
          customerId: customers[4].id,
          workOrderId: workOrders[4].id,
          issueDate: new Date('2025-08-21'),
          dueDate: new Date('2025-09-21'),
          subtotal: 1100,
          taxAmount: 77,
          discountAmount: 0,
          totalAmount: 1177,
          paidAmount: 1177,
          balanceAmount: 0,
          notes: '‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏£‡∏∞‡∏ö‡∏ö‡∏£‡∏∞‡∏ö‡∏≤‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡πâ‡∏≠‡∏ô',
          terms: '‡∏ä‡∏≥‡∏£‡∏∞‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 30 ‡∏ß‡∏±‡∏ô',
          status: 'PAID',
          createdBy: adminUser.id,
          items: {
            create: [
              {
                description: '‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏£‡∏∞‡∏ö‡∏ö‡∏£‡∏∞‡∏ö‡∏≤‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡πâ‡∏≠‡∏ô',
                quantity: 1,
                unitPrice: 800,
                totalPrice: 800,
                type: 'SERVICE'
              },
              {
                description: '‡∏™‡∏≤‡∏£‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡πÅ‡∏•‡∏∞‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå',
                quantity: 1,
                unitPrice: 300,
                totalPrice: 300,
                type: 'PARTS'
              }
            ]
          }
        }
      })
    ])

    console.log(`‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á Invoices ${invoices.length} ‡πÉ‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`)

    // 7. ‡∏™‡∏£‡πâ‡∏≤‡∏á Payments ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
    console.log('\nüí≥ ‡∏™‡∏£‡πâ‡∏≤‡∏á Payments ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°...')
    
    const payments = await Promise.all([
      prisma.payment.upsert({
        where: { 
          id: 'payment-1'
        },
        update: {},
        create: {
          id: 'payment-1',
          invoiceId: invoices[0].id,
          amount: 2000,
          paymentDate: new Date('2025-08-22'),
          paymentMethod: 'BANK_TRANSFER',
          reference: 'TRX001',
          notes: '‡∏ä‡∏≥‡∏£‡∏∞‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô'
        }
      }),
      prisma.payment.upsert({
        where: { 
          id: 'payment-2'
        },
        update: {},
        create: {
          id: 'payment-2',
          invoiceId: invoices[1].id,
          amount: 802,
          paymentDate: new Date('2025-08-21'),
          paymentMethod: 'BANK_TRANSFER',
          reference: 'TRX547957',
          notes: '‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏á‡∏ß‡∏î‡∏ó‡∏µ‡πà 1 (50%)'
        }
      }),
      prisma.payment.upsert({
        where: { 
          id: 'payment-3'
        },
        update: {},
        create: {
          id: 'payment-3',
          invoiceId: invoices[1].id,
          amount: 803,
          paymentDate: new Date('2025-08-21'),
          paymentMethod: 'CASH',
          reference: null,
          notes: '‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏á‡∏ß‡∏î‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢ (‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô)'
        }
      }),
      prisma.payment.upsert({
        where: { 
          id: 'payment-4'
        },
        update: {},
        create: {
          id: 'payment-4',
          invoiceId: invoices[3].id,
          amount: 1177,
          paymentDate: new Date('2025-08-22'),
          paymentMethod: 'CREDIT_CARD',
          reference: 'CC123456',
          notes: '‡∏ä‡∏≥‡∏£‡∏∞‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô'
        }
      })
    ])

    console.log(`‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á Payments ${payments.length} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`)

    // 8. ‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    console.log('\nüìä ‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á:')
    console.log(`   üë• ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤: ${customers.length} ‡∏£‡∏≤‡∏¢`)
    console.log(`   üîß ‡∏ä‡πà‡∏≤‡∏á‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ: ${technicians.length} ‡∏Ñ‡∏ô`)
    console.log(`   ‚öôÔ∏è Miner Models: ${minerModels.length} ‡∏£‡∏∏‡πà‡∏ô`)
    console.log(`   üîß Work Orders: ${workOrders.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`)
    console.log(`   üí∞ Invoices: ${invoices.length} ‡πÉ‡∏ö`)
    console.log(`   üí≥ Payments: ${payments.length} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á`)

    console.log('\nüéâ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!')
    console.log('\nüìã ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö:')
    console.log('   üîê Login: admin@example.com / admin123')
    console.log('   üåê URL: http://localhost:3001')

    return {
      customers: customers.length,
      technicians: technicians.length,
      minerModels: minerModels.length,
      workOrders: workOrders.length,
      invoices: invoices.length,
      payments: payments.length
    }

  } catch (error) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error)
    throw error
  } finally {
    await prisma.$disconnect()
  }
}

// ‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
seedCompleteData()
  .then((stats) => {
    console.log('\n‚úÖ ‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô')
    console.log('üìà ‡∏™‡∏£‡∏∏‡∏õ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥:')
    console.log(`   ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤: ${stats.customers} ‡∏£‡∏≤‡∏¢`)
    console.log(`   ‡∏ä‡πà‡∏≤‡∏á‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ: ${stats.technicians} ‡∏Ñ‡∏ô`)
    console.log(`   Miner Models: ${stats.minerModels} ‡∏£‡∏∏‡πà‡∏ô`)
    console.log(`   Work Orders: ${stats.workOrders} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`)
    console.log(`   Invoices: ${stats.invoices} ‡πÉ‡∏ö`)
    console.log(`   Payments: ${stats.payments} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á`)
    process.exit(0)
  })
  .catch((error) => {
    console.error('‚ùå ‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:', error)
    process.exit(1)
  })
